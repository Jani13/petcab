 CREATE USER PETCAB IDENTIFIED BY PETCAB;
 GRANT RESOURCE, CONNECT TO PETCAB;
 
 
-- drop table REVIEW CASCADE CONSTRAINTS;
 --================================================================
 
--데려다줄개 파이널프로젝트
CREATE TABLE MEMBER (
	USER_NO	NUMBER	NOT NULL,
	USER_NAME	VARCHAR2(20)	NOT NULL,
	USER_ID	VARCHAR2(20)	NOT NULL,
	USER_PWD	VARCHAR2(50)	NOT NULL,
	POSTCODE	NUMBER	NOT NULL,
	ADDRESS	VARCHAR2(1000)	NOT NULL,
	PHONE	VARCHAR2(20)	NOT NULL,
	STATUS	VARCHAR2(2)	NOT NULL,
	USER_TYPE	VARCHAR2(20)	NOT NULL
);

CREATE TABLE REVIEW (
	REVIEW_NO	NUMBER	NOT NULL,
	CALL_TYPE	VARCHAR2(20)	NOT NULL,
	GROUP_NO	NUMBER	NOT NULL,
	GROUP_SEQ	NUMBER	NOT NULL,
	DEPTH	NUMBER	NOT NULL,
	TITLE	VARCHAR2(200)	NOT NULL,
	CONTENT	VARCHAR2(2000)	NOT NULL,
	STAR_NO	NUMBER	NOT NULL,
	POST_DATE	DATE	NOT NULL,
	EDIT_DATE	DATE	NOT NULL,
	VIEW_NO	NUMBER	NOT NULL,
	STATUS	VARCHAR2(3)	NOT NULL,
	USER_NO	NUMBER	NOT NULL,
	CALL_NO	NUMBER	NOT NULL
);

CREATE TABLE DOG (
	ANIMAL_NO	VARCHAR2(100)	NOT NULL,
	DOG_NAME	VARCHAR2(50)	NOT NULL,
	DOG_TYPE	VARCHAR2(50)	NOT NULL,
	AGE	NUMBER	NULL,
	VACC	VARCHAR2(100)	NULL,
	DISORDER	VARCHAR2(100)	NULL,
	OTHER	VARCHAR2(1000)	NULL,
	IMAGE_ORI	VARCHAR2(2000)	NULL,
	IMAGE_RE	VARCHAR2(2000)	NULL,
	USER_NO	NUMBER	NOT NULL
);

CREATE TABLE PARTNER (
	USER_NO	NUMBER	NOT NULL,
	PARTNER_NAME	VARCHAR2(100)	NOT NULL,
	PARTNER_TYPE	VARCHAR2(20)	NOT NULL,
	LOCATION	VARCHAR2(1000)	NOT NULL,
	PHONE	VARCHAR2(20)	NOT NULL,
	OPEN_TIME	VARCHAR2(500)	NOT NULL,
	IMAGE_ORI	VARCHAR2(2000)	NULL,
	IMAGE_RE	VARCHAR2(2000)	NULL,
	ABOUT	VARCHAR2(3000)	NULL,
	STATUS	VARCHAR2(3)	NOT NULL
);

CREATE TABLE GEN_CALL (
	CALL_NO	NUMBER	NOT NULL,
	TIME	DATE	NOT NULL,
	FROM_WHERE	VARCHAR2(500)	NOT NULL,
	TO_WHERE	VARCHAR2(500)	NOT NULL,
	WITH_OWNER	VARCHAR2(3)	NOT NULL,
	TO_DRIVER	VARCHAR2(1000)	NOT NULL,
	STATUS	VARCHAR2(3)	NOT NULL,
	CALL_TYPE	NUMBER	NOT NULL,
	USER_NO	NUMBER	NOT NULL,
	ANIMAL_NO_A	VARCHAR2(100)	NOT NULL,
	ANIMAL_NO_B	VARCHAR2(100)	NULL,
	ANIMAL_NO_C	VARCHAR2(100)	NULL,
	MERCHANT_UID	VARCHAR2(1000)	NOT NULL
);

CREATE TABLE REVIEW_REPLY (
	REPLY_NO	NUMBER	NOT NULL,
	GROUP_NO	NUMBER	NULL,
	GROUP_SEQ	NUMBER	NULL,
	DEPTH	NUMBER	NULL,
	CONTENT	VARCHAR2(1000)	NULL,
	POST_DATE	DATE	NULL,
	EDIT_DATE	DATE	NULL,
	STATUS	VARCHAR2(3)	NULL,
	USER_NO	NUMBER	NOT NULL,
	REVIEW_NO	NUMBER	NOT NULL
);

CREATE TABLE QUES (
	QUES_NO	NUMBER	NOT NULL,
	TITLE	VARCHAR2(200)	NOT NULL,
	CONTENT	VARCHAR2(2000)	NOT NULL,
	POST_DATE	DATE	NOT NULL,
	EDIT_DATE	DATE	NOT NULL,
	VIEW_NO	NUMBER	NOT NULL,
	QUES_TYPE	VARCHAR2(50)	NOT NULL,
	QUES_PWD	NUMBER	NULL,
	GROUP_NO	NUMBER	NOT NULL,
	GROUP_SEQ	NUMBER	NOT NULL,
	DEPTH	NUMBER	NOT NULL,
	USER_NO	NUMBER	NOT NULL
);

CREATE TABLE DRIVER (
	USER_NO	NUMBER	NOT NULL,
	CAR_TYPE	VARCHAR2(20)	NULL,
	CAR_NO	VARCHAR2(50)	NULL,
	ABOUT	VARCHAR2(2000)	NULL,
	IMAGE_ORI	VARCHAR2(2000)	NULL,
	IMAGE_RE	VARCHAR2(2000)	NULL
);

CREATE TABLE QUES_REPLY (
	QUES_NO	NUMBER	NOT NULL,
	CONTENT	VARCHAR2(2000)	NOT NULL,
	POST_DATE	DATE	NOT NULL,
	EDIT_DATE	DATE	NOT NULL,
	USER_NO	NUMBER	NOT NULL
);

CREATE TABLE EMERG_CALL (
	CALL_NO	NUMBER	NOT NULL,
	TO_PARTNER	VARCHAR2(1000)	NULL,
	TO_REJECT	VARCHAR2(100)	NULL,
	USER_NO	NUMBER	NOT NULL
);

CREATE TABLE PAYMENT (
	MERCHANT_UID	VARCHAR2(1000)	NOT NULL,
	PG	VARCHAR2(100)	NOT NULL,
	PAY_METHOD	VARCHAR2(100)	NOT NULL,
	NAME	VARCHAR2(100)	NOT NULL,
	AMOUNT	NUMBER	NOT NULL,
	IMP_UID	VARCHAR2(1000)	NOT NULL,
	PAID_AMOUNT	NUMBER	NOT NULL,
	APPLY_NUM	VARCHAR2(1000)	NOT NULL,
	SUCCESS	VARCHAR2(100)	NOT NULL,
	STATUS	VARCHAR2(100)	NOT NULL,
	PG_PROVIDER	VARCHAR2(100)	NOT NULL,
	PG_TID	VARCHAR2(100)	NOT NULL,
	PAID_AT	NUMBER	NOT NULL,
	RECEIPT_URL	VARCHAR2(100)	NOT NULL,
	VBANK_NUM	VARCHAR2(100)	NULL,
	VBANK_NAME	VARCHAR2(100)	NULL,
	VBANK_HOLDER	VARCHAR2(100)	NULL,
	VBANK_DATE	NUMBER	NULL,
	USER_NO	NUMBER	NOT NULL
);

ALTER TABLE MEMBER ADD CONSTRAINT PK_MEMBER PRIMARY KEY (
	USER_NO
);

ALTER TABLE REVIEW ADD CONSTRAINT PK_REVIEW PRIMARY KEY (
	REVIEW_NO
);

ALTER TABLE DOG ADD CONSTRAINT PK_DOG PRIMARY KEY (
	ANIMAL_NO
);

ALTER TABLE PARTNER ADD CONSTRAINT PK_PARTNER PRIMARY KEY (
	USER_NO
);

ALTER TABLE GEN_CALL ADD CONSTRAINT PK_GEN_CALL PRIMARY KEY (
	CALL_NO
);

ALTER TABLE REVIEW_REPLY ADD CONSTRAINT PK_REVIEW_REPLY PRIMARY KEY (
	REPLY_NO
);

ALTER TABLE QUES ADD CONSTRAINT PK_QUES PRIMARY KEY (
	QUES_NO
);

ALTER TABLE DRIVER ADD CONSTRAINT PK_DRIVER PRIMARY KEY (
	USER_NO
);

ALTER TABLE QUES_REPLY ADD CONSTRAINT PK_QUES_REPLY PRIMARY KEY (
	QUES_NO
);

ALTER TABLE EMERG_CALL ADD CONSTRAINT PK_EMERG_CALL PRIMARY KEY (
	CALL_NO
);

ALTER TABLE PAYMENT ADD CONSTRAINT PK_PAYMENT PRIMARY KEY (
	MERCHANT_UID
);

ALTER TABLE REVIEW ADD CONSTRAINT FK_MEMBER_TO_REVIEW_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE REVIEW ADD CONSTRAINT FK_GEN_CALL_TO_REVIEW_1 FOREIGN KEY (
	CALL_NO
)
REFERENCES GEN_CALL (
	CALL_NO
);

ALTER TABLE DOG ADD CONSTRAINT FK_MEMBER_TO_DOG_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE PARTNER ADD CONSTRAINT FK_MEMBER_TO_PARTNER_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE GEN_CALL ADD CONSTRAINT FK_DRIVER_TO_GEN_CALL_1 FOREIGN KEY (
	USER_NO
)
REFERENCES DRIVER (
	USER_NO
);

ALTER TABLE GEN_CALL ADD CONSTRAINT FK_DOG_TO_GEN_CALL_1 FOREIGN KEY (
	ANIMAL_NO_A
)
REFERENCES DOG (
	ANIMAL_NO
);

ALTER TABLE GEN_CALL ADD CONSTRAINT FK_DOG_TO_GEN_CALL_2 FOREIGN KEY (
	ANIMAL_NO_B
)
REFERENCES DOG (
	ANIMAL_NO
);

ALTER TABLE GEN_CALL ADD CONSTRAINT FK_DOG_TO_GEN_CALL_3 FOREIGN KEY (
	ANIMAL_NO_C
)
REFERENCES DOG (
	ANIMAL_NO
);

ALTER TABLE GEN_CALL ADD CONSTRAINT FK_PAYMENT_TO_GEN_CALL_1 FOREIGN KEY (
	MERCHANT_UID
)
REFERENCES PAYMENT (
	MERCHANT_UID
);

ALTER TABLE REVIEW_REPLY ADD CONSTRAINT FK_MEMBER_TO_REVIEW_REPLY_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE REVIEW_REPLY ADD CONSTRAINT FK_REVIEW_TO_REVIEW_REPLY_1 FOREIGN KEY (
	REVIEW_NO
)
REFERENCES REVIEW (
	REVIEW_NO
);

ALTER TABLE QUES ADD CONSTRAINT FK_MEMBER_TO_QUES_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE DRIVER ADD CONSTRAINT FK_MEMBER_TO_DRIVER_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE QUES_REPLY ADD CONSTRAINT FK_QUES_TO_QUES_REPLY_1 FOREIGN KEY (
	QUES_NO
)
REFERENCES QUES (
	QUES_NO
);

ALTER TABLE QUES_REPLY ADD CONSTRAINT FK_MEMBER_TO_QUES_REPLY_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

ALTER TABLE EMERG_CALL ADD CONSTRAINT FK_GEN_CALL_TO_EMERG_CALL_1 FOREIGN KEY (
	CALL_NO
)
REFERENCES GEN_CALL (
	CALL_NO
);

ALTER TABLE EMERG_CALL ADD CONSTRAINT FK_PARTNER_TO_EMERG_CALL_1 FOREIGN KEY (
	USER_NO
)
REFERENCES PARTNER (
	USER_NO
);

ALTER TABLE PAYMENT ADD CONSTRAINT FK_MEMBER_TO_PAYMENT_1 FOREIGN KEY (
	USER_NO
)
REFERENCES MEMBER (
	USER_NO
);

CREATE SEQUENCE SEQ_REPLY_NO;
CREATE SEQUENCE SEQ_USER_NO;
CREATE SEQUENCE SEQ_REVIEW_NO;
CREATE SEQUENCE SEQ_ANMAL_NO;
CREATE SEQUENCE SEQ_CALL_NO;
CREATE SEQUENCE SEQ_QUES_NO;
CREATE SEQUENCE SEQ_MERCHANT_UID;


